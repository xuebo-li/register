<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>
    <!--log4jdbc 日志配置-->
    <logger name="jdbc.sqlonly" level="info">
    </logger>
    <logger name="jdbc.audit" level="OFF">
    </logger>
    <logger name="jdbc.resultset" level="OFF">
    </logger>
    <logger name="jdbc.connection" level="OFF">
    </logger>
    <logger name="jdbc.sqltiming" level="OFF">
        <appender-ref ref="CONSOLE"/>
    </logger>
    <springProperty scope="context" name="APPLICATION_NAME" source="spring.application.name"/>
    <springProperty scope="context" name="PROFILE_NAME" source="spring.profiles.active"/>

    <property name="LOG_PATH" value="/var/log/podm/order"/>
    <property name="APP_NAME" value="order"/>
    <!--    读取application.yml文件里定义的变量，该变量可通过环境变量注入，以在部署时适配不同环境-->
    <springProperty scope="context" name="applicationName" source="spring.application.name"/>
    <springProperty scope="context" name="kafkaEnabled" source="log.output.kafka.enabled"/>
    <springProperty scope="context" name="kafkaTopic" source="log.output.kafka.topic"/>
    <springProperty scope="context" name="kafkaBootstrap" source="log.output.kafka.bootstrap"/>
    <springProperty scope="context" name="kafkaUsername" source="log.output.kafka.username"/>
    <springProperty scope="context" name="kafkaPassword" source="log.output.kafka.password"/>
    <springProperty scope="context" name="kafkaEnv" source="log.output.kafka.env"/>

    <!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】,,, -->
    <!-- appender是configuration的子节点，是负责写日志的组件。 -->
    <!-- ConsoleAppender：把日志输出到控制台 -->
    <!-- 本地输出参数方法 -->
    <appender name="APP_LOG" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>[${APPLICATION_NAME}-${PROFILE_NAME}] %d{yyyy-MM-dd HH:mm:ss.SSS} %p [%logger{0}:%line] - %m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <springProfile name="!loc">
        <!-- FILE_LOG 只用于容器环境，local本地环境不需要生成log文件 -->
        <!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
        <!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log -->
        <!--             2.如果日期没有发生变化，但是当前日志的文件大小超过10M时，对当前日志进行分割 重命名-->
        <appender name="FILE_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <File>${LOG_PATH}/${APP_NAME}.log</File>
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/sourcing.2017-12-05.log -->
            <fileNamePattern>${LOG_PATH}/${APP_NAME}.log.%d.%i.log</fileNamePattern>
            <!-- maxFileSize:这是活动文件的大小，默认值是10MB -->
            <maxFileSize>10MB</maxFileSize>
            <!-- 每产生一个日志文件，该日志文件的保存期限为10天 -->
            <maxHistory>10</maxHistory>
        </rollingPolicy>
            <encoder>
                <!-- pattern节点，用来设置日志的输入格式 -->
                <pattern>
                    %d{yyyy-MM-dd HH:mm:ss.SSS} %p (%file:%line\) - %m%n
                </pattern>
                <!-- 记录日志的编码:此处设置字符集 - -->
                <charset>UTF-8</charset>
            </encoder>
        </appender>
    </springProfile>

    <springProfile name="!loc">
        <!-- 控制台输出日志级别 -->
        <root level="INFO">
            <appender-ref ref="APP_LOG"/>
            <appender-ref ref="FILE_LOG"/>
        </root>
    </springProfile>

    <springProfile name="loc">
        <root level="INFO">
            <appender-ref ref="APP_LOG"/>
        </root>
    </springProfile>

</configuration>
